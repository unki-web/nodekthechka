export declare const node: () => {
    name: string;
    listen(app: import("elysia").AnyElysia): (options: any, callback: import("elysia/universal/server").ListenCallback | undefined) => void;
    isWebStandard?: boolean;
    handler: {
        mapResponse(response: unknown, set: import("elysia").Context["set"], ...params: unknown[]): unknown;
        mapEarlyResponse(response: unknown, set: import("elysia").Context["set"], ...params: unknown[]): unknown;
        mapCompactResponse(response: unknown, ...params: unknown[]): unknown;
        createStaticHandler?(handle: unknown, hooks: import("elysia/types").AnyLocalHook, setHeaders?: import("elysia").Context["set"]["headers"], ...params: unknown[]): (() => unknown) | undefined;
        createNativeStaticHandler?(handle: unknown, hooks: import("elysia/types").AnyLocalHook, setHeaders?: import("elysia").Context["set"]["headers"], ...params: unknown[]): (() => import("elysia").MaybePromise<Response>) | undefined;
    };
    composeHandler: {
        mapResponseContext?: string;
        declare?(inference: import("elysia/sucrose").Sucrose.Inference): string | undefined;
        inject?: Record<string, unknown>;
        preferWebstandardHeaders?: boolean;
        headers: string;
        parser: import("elysia/types").Prettify<Record<"json" | "text" | "urlencoded" | "arrayBuffer" | "formData", (isOptional: boolean) => string> & {
            declare?: string;
        }>;
    };
    composeGeneralHandler: {
        parameters?: string;
        error404(hasEventHook: boolean, hasErrorHook: boolean): {
            declare: string;
            code: string;
        };
        createContext(app: import("elysia").AnyElysia): string;
        inject?: Record<string, unknown>;
    };
    composeError: {
        declare?: string;
        inject?: Record<string, unknown>;
        mapResponseContext: string;
        validationError: string;
        unknownError: string;
    };
    ws?(app: import("elysia").AnyElysia, path: string, handler: import("elysia/ws/types").AnyWSLocalHook): unknown;
    createSystemRouterHandler?(method: string, path: string, hook: import("elysia/types").AnyLocalHook, app: import("elysia").AnyElysia): void;
};
export default node;
